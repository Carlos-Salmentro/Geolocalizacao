// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projeto_Geo.Repository;

#nullable disable

namespace Projeto_Geo.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250324230809_create-base_dados")]
    partial class createbase_dados
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Projeto_Geo.Domain.BaseDados", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .HasColumnType("longtext")
                        .HasColumnName("bairro");

                    b.Property<string>("CdlogCem")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("cdlog_cem");

                    b.Property<int?>("CepD")
                        .HasColumnType("int")
                        .HasColumnName("cep_d");

                    b.Property<int?>("CepE")
                        .HasColumnType("int")
                        .HasColumnName("cep_e");

                    b.Property<int>("Dir")
                        .HasColumnType("int")
                        .HasColumnName("dir");

                    b.Property<double>("DistCenD")
                        .HasColumnType("double")
                        .HasColumnName("dist_cen_d");

                    b.Property<double>("DistCenM")
                        .HasColumnType("double")
                        .HasColumnName("dist_cen_m");

                    b.Property<string>("Distrito")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("distrito");

                    b.Property<string>("EndLeft")
                        .HasColumnType("longtext")
                        .HasColumnName("end_left");

                    b.Property<string>("EndRight")
                        .HasColumnType("longtext")
                        .HasColumnName("end_right");

                    b.Property<int>("ExtensaoM")
                        .HasColumnType("int")
                        .HasColumnName("extensao_m");

                    b.Property<int?>("LeftZip")
                        .HasColumnType("int")
                        .HasColumnName("left_zip");

                    b.Property<double>("Lenght")
                        .HasColumnType("double")
                        .HasColumnName("lenght");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("municipio");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.Property<string>("NomeCaps")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome_caps");

                    b.Property<string>("NomeConcat")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_concat");

                    b.Property<string>("NomePrep")
                        .HasColumnType("longtext")
                        .HasColumnName("nomeprep");

                    b.Property<string>("NomeSigla")
                        .HasColumnType("longtext")
                        .HasColumnName("nomesigla");

                    b.Property<string>("NomeTit")
                        .HasColumnType("longtext")
                        .HasColumnName("nometit");

                    b.Property<bool?>("OnibusMsp")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("onibus_msp");

                    b.Property<int>("Parity")
                        .HasColumnType("int")
                        .HasColumnName("parity");

                    b.Property<int?>("RightZip")
                        .HasColumnType("int")
                        .HasColumnName("right_zip");

                    b.Property<string>("StartLeft")
                        .HasColumnType("longtext")
                        .HasColumnName("start_left");

                    b.Property<string>("StartRight")
                        .HasColumnType("longtext")
                        .HasColumnName("start_right");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.ToTable("base_dados");
                });
#pragma warning restore 612, 618
        }
    }
}
